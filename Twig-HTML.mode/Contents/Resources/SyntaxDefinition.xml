<?xml version="1.0" encoding="UTF-8"?>
<syntax>
    <head>
        <name>Twig-HTML</name>
        <autocompleteoptions use-spelling-dictionary="yes"/>
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@]]></charsintokens>
    </head>

    <states>
        <default id="Base">

            <keywords id="Entities" scope="language.property" useforautocomplete="no">
                <regex>(&amp;\w{1,8};)</regex>
                <regex>(&amp;#[0-9]+;)</regex>
                <regex>(&amp;#x[A-Fa-f0-9]+;)</regex>
            </keywords>

            <state id="Twig" scope="markup.declaration" foldable="yes">
                <begin><regex>{[{%]</regex></begin>
                <end><regex>[}%]}</regex></end>
                <import mode="Twig" />

                <keywords id="Template Tag" scope="markup.declaration" useforautocomplete="yes">
                    <regex>({%|%})</regex>
                </keywords>

                <keywords id="Template Tags" scope="keyword.control" useforautocomplete="yes">
                    <!-- tags -->
                    <string>autoescape</string>
                    <string>endautoescape</string>
                    <string>block</string>
                    <string>endblock</string>
                    <string>for</string>
                    <string>endfor</string>
                    <string>display</string>
                    <string>extends</string>
                    <string>filter</string>
                    <string>endfilter</string>
                    <string>if</string>
                    <string>elseif</string>
                    <string>else</string>
                    <string>endif</string>
                    <string>import</string>
                    <string>include</string>
                    <string>macro</string>
                    <string>endmacro</string>
                    <string>parent</string>
                    <string>raw</string>
                    <string>endraw</string>
                    <string>set</string>
                    <string>spaceless</string>
                    <string>endspaceless</string>

                    <!-- extension tags -->
                    <string>debug</string>
                    <string>plural</string>
                    <string>trans</string>
                    <string>endtrans</string>

                    <!-- Symfony2 extensions -->
                    <string>contenttag</string>
                    <string>endcontenttag</string>
                    <string>form_theme</string>
                    <string>ifrole</string>
                    <string>endifrole</string>
                    <string>path</string>
                    <string>tag</string>
                    <string>transchoice</string>
                    <string>endtranschoice</string>
                    <string>javascript</string>
                    <string>javascripts</string>
                    <string>stylesheet</string>
                    <string>stylesheets</string>
                    <string>asset</string>
                    <string>render</string>
                    <string>flash</string>

                    <!-- keywords -->
                    <string>and</string>
                    <string>as</string>
                    <string>by</string>
                    <string>in</string>
                    <string>is</string>
                    <string>not</string>
                    <string>or</string>
                    <string>with</string>
                    <string>only</string>
                    <string>from</string>
                </keywords>

                <keywords id="Double Quoted Strings" scope="string" type="string" useforautocomplete="no">
                    <regex>(".*?")</regex>
                </keywords>

                <keywords id="Single Quoted Strings" scope="string" type="string" useforautocomplete="no">
                    <regex>('.*?')</regex>
                </keywords>

                <keywords id="Context Variable" scope="language.variable" useforautocomplete="no">
                    <regex>({{|}})</regex>
                </keywords>

                <keywords id="Context Variables" scope="language.variable" useforautocomplete="no">
                    <regex>{{(.*?)}}</regex>
                </keywords>

                <keywords id="Filters" scope="language.function" useforautocomplete="yes">
                    <regex>(\|\s*[\w_]+)</regex>
                </keywords>
            </state>

            <state id="Comment" type="comment" scope="markup.comment">
                <begin><regex>&lt;!--</regex></begin>
                <end><regex>--&gt;</regex></end>
                <keywords id="SGML Double Dash" scope="markup.comment" useforautocomplete="no">
                    <regex>(?&lt;!\!)(--)(?!&gt;)</regex>
                </keywords>
                <import mode="Twig" />
            </state>

            <state id="Twig Comment" type="comment" scope="markup.comment" useforautocomplete="no">
                <begin><regex>{#</regex></begin>
                <end><regex>#}</regex></end>
            </state>
            <!--  This is the "we do a complete HTML mode and import Ruby everywhere" section -->
			<state-link mode="XML" state="Comment"/>
            <state-link mode="XML" state="CDATA"/>
            <state-link mode="XML" state="Doctype"/>
            <state-link mode="XML" state="Escape"/>
			
			<state id="Inline CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
				<begin>
					<regex>&lt;[ \t]*(?i)style[^>]*></regex>
					<autoend>&lt;/style></autoend>
				</begin>
				<end>
					<regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*></regex>
				</end>
				<state-link state="Twig"/>
                
				<import mode="CSS"/>
				<state id="CSSInside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
					<begin>
						<string>{</string>
						<autoend>}</autoend>
					</begin>
					<end>
						<regex>}</regex>
					</end>
					<import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
					<state id="CSS Attribute state" scope="meta.block.attribute">
						<begin>
							<string>:</string>
						</begin>
						<end>
							<regex>(;|.(?=})|[\n\r])</regex>
						</end>
						<import mode="CSS" state="Attribute state" keywords-only="yes"/>
						<state-link state="Twig"/>
						<state-link state="CSSAutodocComment"/>
						<state-link state="CSSComment"/>
						<state-link state="CSSString"/>
						<state-link state="CSSSingleString"/>
					</state>
					<state-link state="CSSAutodocComment"/>
					<state-link state="CSSComment"/>
					<state-link state="CSSString"/>
					<state-link state="CSSSingleString"/>
					<state-link state="Twig"/>
				</state>
                
				<import keywords-only="yes"/>
                
				<state id="CSSRules" scope="style.at-rule">
					<begin>
						<regex>^@[-\w_]+</regex>
					</begin>
					<end>
						<regex>.(?=[{\n\r])</regex>
					</end>
				</state>
                
				<state id="CSSAutodocComment" type="comment" foldable="yes" scope="style.comment.block.documentation">
					<begin>
						<string>/\*"</string>
						<autoend>"\*/</autoend>
					</begin>
					<end>
						<regex>"\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Twig"/>
				</state>
				<state id="CSSComment" type="comment" foldable="yes" scope="style.comment.block">
					<begin>
						<string>/\*</string>
						<autoend>\*/</autoend>
					</begin>
					<end>
						<regex>\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Twig"/>
				</state>
				<state id="CSSString" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*"</regex>
					</end>
					<state-link state="Twig"/>
				</state>
				<state id="CSSSingleString" type="string" scope="style.value.string.single">
					<begin>
						<string>'</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*'</regex>
					</end>
					<state-link state="Twig"/>
				</state>
                
			</state>
            
            
			<state id="Inline JavaScript" delimiterState="Tags" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" scope="meta.block.js">
				<begin>
                    <regex>(?:&lt;[ \t]*(?i)script\s*?>)|(?:&lt;[ \t]*(?i)script.+?javascript.*?>)</regex>
					<autoend>&lt;/script></autoend>
				</begin>
				<end>
					<regex>&lt;(?i)/script[^>]*></regex>
				</end>
				<import mode="JavaScript" keywords-only="yes"/>
				<state-link state="Twig"/>
                
				<state id="JSAutodocComment" type="comment" foldable="yes" scope="comment.block.documentation.js">
					<begin><regex>/\*"</regex></begin>
					<end><regex>"\*/</regex></end>
					<state-link state="Twig"/>
				</state>
                
				<state id="JSComment" type="comment" foldable="yes" scope="comment.block.js">
					<begin><regex>/\*</regex><autoend>\*/</autoend></begin>
					<end><regex>\*/</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Twig"/>
				</state>
                
				<state id="JSSingleComment" type="comment" scope="comment.line.double-slash.js">
					<begin><regex>//</regex></begin>
					<end><regex>[\n\r]|.(?=&lt;(?i)/script\s*>)</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Twig"/>
				</state>
                
				<state id="JSRegular Expressions" type="string" scope="string.regexp.js">
					<begin><regex>(?&lt;![&lt;/])/.*?[^\\](?=/[^\n\r]*(?:;|\)|,|[\n\r]))</regex></begin>
					<end><regex>/[cgimosx]*</regex></end>
					<state-link state="Twig"/>
				</state>
                
				<state id="JSString" type="string" scope="string.double.js">
					<begin><regex>"</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
					<state-link state="Twig"/>
				</state>
                
				<state id="JSSingleString" type="string" scope="string.single.js">
					<begin><regex>'</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
					<state-link state="Twig"/>
				</state>
                
				<state id="JSBlock" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
					<begin><regex>{</regex><autoend>}</autoend></begin>
					<end><regex>}</regex></end>
					<import mode="JavaScript" keywords-only="yes"/>
					<import mode="Twig" state="Inline JavaScript"/>
				</state>
			</state>
            
			<state id="Self Closing Tags" foldable="no" scope="markup.tag">
            	<begin>
                    <regex>&lt;[ \t]*(?i)(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)</regex>
                </begin>
                <end>
                    <regex>&gt;</regex>
                </end>
                <import state="Tags"/>
            </state>
            
            <state id="Foldable Tags" containerState="yes" delimiterState="Tags" foldBegin="&lt;[ \t]*(?'xmltagstatename'[-:_\.\w\d]+)(?:.|[\r\n])*(?&lt;![/?])>\Z" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*>" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
				
				<import mode="XML" keywords-only="yes"/>
                <import keywords-only="yes"/>
				<import/>
			</state>
            
			<state id="Tags" usespellchecking="no" foldState="Foldable Tags" scope="markup.tag">
                <begin>
                    <regex>&lt;</regex>
                </begin>
                <end>
                    <regex>&gt;</regex>
                </end>
				<state-link state="Twig"/>
                
                <state id="Javascript Actions" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.default" >
					<begin><regex>(?&lt;=[ \t])(?i)on[\w]+[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>
	                <keywords id="Action Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\A([\w-]+)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Action Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Action Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\A(?i)on[\w-]+([ \t]*=[ \t]*)</regex>
					</keywords>
					
	                <import mode="JavaScript"/>
            	</state>
            	
            	<state id="Links" type="url" useforautocomplete="no" scope="meta.link">
					<begin><regex>(?&lt;=[ \t])(?i)(?:href|src)[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>
                    
					<state-link state="Twig"/>
                    
					<state id="Javascript in Links" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
						<begin><regex>\A[ \t]*(?i)javascript:</regex></begin>
						<end><regex>(?'unwindend'")</regex></end>
		                <import mode="JavaScript"/>
					</state>
					
					<keywords id="Link Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\A(\w+)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Link Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Link Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\A(?i)\w+([ \t]*=[ \t]*)</regex>
					</keywords>
					
				</state>
            	
               	<state id="Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
	                <state-link state="Twig" />
				</state>
				
				<state id="Single Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
	                <state-link state="Twig" />
				</state>
				
				<keywords id="Attributes in Tags" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=)</regex>
				</keywords>
            </state>

        </default>
    </states>
</syntax>
